#!/usr/bin/env node

/**
 * Module dependencies.
 */
const io = require('@pm2/io')
var http = require('http');

io.init({
  metrics: {
    network: {
      ports: true
    }
  }
})

const currentReqs = io.counter({
  name: 'Realtime request count',
  id: 'app/realtime/requests'
});

const reqsec = io.meter({
  name: 'req/sec',
  id: 'app/requests/volume'
})

const latency = io.metric({
  name: 'latency',
  type: 'histogram',
  measurement: 'mean'
});

var latencyValue = 0;

setInterval(() => {
  latencyValue = Math.round(Math.random() * 100);
  latency.set(latencyValue);
}, 100);

http.createServer((req, res) => {
  // Increment the counter, counter will eq 1
  currentReqs.inc();
  req.on('end', () => {
    // Decrement the counter, counter will eq 0
    currentReqs.dec();
  });
});

http.createServer((req, res) => {
  reqsec.mark()
  res.end({ success: true })
})

var app = require('../app');
var debug = require('debug')('rannet:server');
var http = require('http');

app.use(io.expressErrorHandler())

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '81');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
